海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@JustLive@{"last_chapter_rule":"","title":"JustLive","author":"Joe&&随风&&发粪涂墙&&Rx&&Zruiry","url":"hiker://empty##fypage","version":20231026,"col_type":"movie_3","class_name":"","type":"video","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet d = [];\nlet s = [];\nlet api = \"http://yj1211.work:8013/api/live/\";\nlet uid = getItem(\"uid\", \"\");\nlet clas = getMyVar(\"class\", \"all\");\nlet headers = {\n    headers: {\n        \"User-Agent\": \"okhttp/3.12.13\"\n    }\n};\n\nif (MY_PAGE == 1) {\n    s.unshift({\n        title: getItem(\"nickname\", \"注册 / 登录\"),\n        desc: getItem(\"username\", \"\") + \"\\t\\t\",\n        url: $(\"#noLoading#\").lazyRule(() => {\n            putMyVar(\"sType\", \"living\");\n            return \"hiker://page/history#noHistory##noRecordHistory#\";\n        }),\n        img: \"https://hikerfans.com/tubiao/ke/73.png\",\n        col_type: \"avatar\"\n    });\n    s.push({\n        title: \"搜索\",\n        desc: uid == \"\" ? \"搜 索 需 先 登 录\" : \"可 以 少 字 ，不 可 错 字 ！\",\n        url: $.toString(() => {\n            putMyVar(\"Mykey\", input);\n            refreshPage(true)\n        }),\n        col_type: \"input\",\n        extra: {\n            defaultValue: getMyVar(\"Mykey\")\n        }\n    }, {\n        col_type: \"big_blank_block\"\n    }, {\n        col_type: \"big_blank_block\"\n    }, {\n        col_type: \"line_blank\"\n    });\n\n    //热门直播\n    s.push({\n        title: '<font color=\"#0aa344\">热门直播</font>',\n        desc: '<font color=\"#0aa344\">➮\\t\\t</font>',\n        url: $('#noLoading#').lazyRule(() => {\n            putMyVar(\"typeNameVar\", '全部');\n            return \"hiker://page/newClass\" + '#noHistory#';\n        }),\n        img: \"https://img1.baidu.com/it/u=1131331416,2666467354&fm=253&fmt=auto&app=120&f=PNG?w=500&h=500@Referer=\",\n        col_type: \"avatar\"\n    });\n\n    let CT = Date.now();\n    let LT = \"\";\n    try {\n        eval(\"var flb = \" + readFile(\"hiker://files/cache/justlive.js\"), 0);\n        LT = flb.lt;\n    } catch (e) {\n        LT = \"0\";\n    };\n    let sarea = getMyVar(\"sarea\", \"0\");\n    if (!fileExist(\"hiker://files/cache/justlive.js\") || CT > (LT + 2 * 24 * 60 * 60 * 1000) || sarea !== \"0\") {\n        //游侠\n        let yxurl = \"https://app.ali213.net/top/hot.html\";\n        let area = \"\";\n        try {\n            area = sarea == \"0\" ? flb.area : flb.area + \"|\" + sarea;\n        } catch (e) {\n            area = \"画符能手|我的勇者|太空行动|志战略|弹壳特|地铁跑|忍者新世|拣爱\";\n        };\n\n        let lisf = pdfa(fetch(yxurl), \".main-container&&img\").filter(element => !new RegExp(area).test(element)).slice(0, 8);\n        let list = [];\n        for (let li of lisf) {\n            let title = pdfh(li, \"img&&alt\");\n            let pic = pdfh(li, \"img&&src\");\n            list.push(title + \"$\" + pic);\n        }\n        var fl = {\n            \"lt\": CT,\n            \"list\": list,\n            \"area\": area\n        };\n        saveFile(\"hiker://files/cache/justlive.js\", JSON.stringify(fl), 0);\n        clearMyVar(\"sarea\");\n    };\n\n    let list = typeof(fl) !== \"undefined\" ? fl.list : flb.list;\n    for (let li of list) {\n        let title = li.split(\"$\")[0];\n        s.push({\n            title: title,\n            img: li.split(\"$\")[1],\n            col_type: \"icon_round_small_4\",\n            url: $(\"#noLoading#\").lazyRule((title) => {\n                putMyVar(\"home\", \"1\");\n                return \"hiker://page/newClassList?typeName=手游&areaName=\" + title + \"&page=fypage#noHistory#\";\n            }, title),\n        })\n    };\n\n    s.push({\n        col_type: \"big_blank_block\"\n    }, {\n        col_type: \"big_blank_block\"\n    }, {\n        col_type: \"line_blank\"\n    }, {\n        col_type: \"big_blank_block\"\n    }, {\n        col_type: \"big_blank_block\"\n    });\n\n    //全部分类\n    s.push({\n        title: getMyVar(\"Mykey\") ? '搜索直播' : \"全部直播\",\n        desc: getMyVar(\"Mykey\") ? '<font color=\"#0aa344\">返回\\t</font>' : \"\",\n        url: $('#noLoading#').lazyRule(() => {\n            if (getMyVar(\"Mykey\", \"\") == \"\") {\n                return 'hiker://empty';\n            } else {\n                refreshPage(false);\n                clearMyVar(\"Mykey\");\n                clearMyVar(\"class\");\n                return 'hiker://empty';\n            };\n        }),\n        img: getMyVar(\"Mykey\") ? \"https://hikerfans.com/tubiao/messy/25.svg@Referer=\" : \"https://img2.baidu.com/it/u=517893027,2474596697&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=594@Referer=\",\n        col_type: \"avatar\"\n    }, {\n        col_type: \"big_blank_block\"\n    }, {\n        col_type: \"big_blank_block\"\n    });\n\n    let lei = [\"全部\", \"虎牙\", \"斗鱼\", \"哔哩\", \"抖音\", \"网易\"];\n    let lurl = [\"all\", \"huya\", \"douyu\", \"bilibili\", \"douyin\", \"cc\"];\n    for (let i in lei) {\n        s.push({\n            title: lurl[i] == clas ? \"‘‘’’<b>\" + lei[i].fontcolor(\"#FA7298\") + \"</b>\" : lei[i],\n            url: $('#noLoading#').lazyRule((url) => {\n                putMyVar(\"class\", url);\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, lurl[i]),\n            col_type: \"scroll_button\"\n        })\n    };\n    s.push({\n        col_type: \"big_blank_block\"\n    }, {\n        col_type: \"big_blank_block\"\n    });\n\n    s.push({\n        img: \"\",\n        url: \"hiker://empty\",\n        col_type: \"card_pic_3\",\n        extra: {\n            cls: \"cls_load\"\n        }\n    }, {\n        img: \"https://hikerfans.com/weisyr/img/Loading1.gif\",\n        url: \"hiker://empty\",\n        col_type: \"pic_3\",\n        extra: {\n            cls: \"cls_load\"\n        }\n    });\n    setPreResult(s);\n};\n\n//搜索列表\nif (getMyVar(\"Mykey\")) {\n    if (MY_PAGE == '1') {\n        if (uid == \"\") {\n            d.push({\n                title: \"登录后继续搜索\",\n                desc: \"点击登录\",\n                url: $('#noLoading#').lazyRule(() => {\n                    putMyVar(\"sType\", 'living');\n                    return 'hiker://page/history#noHistory##noRecordHistory#'\n\n                }),\n                col_type: \"text_center_1\"\n            });\n        } else {\n            try {\n                let ss_url = api + \"search?platform=\" + clas + \"&keyWords=\" + getMyVar(\"Mykey\") + \"&uid=\" + uid;\n                let json = JSON.parse(fetch(ss_url, headers)).data;\n                let place = \"so\";\n                for (let i in json) {\n                    let data = json[i];\n                    $.require(\"public\").Public.Lists(api, uid, place, d, data.roomId, data.platform, data.nickName, data.cateName, data.followers, data.headPic, data.isLive);\n                };\n                d.push({\n                    title: \"““到底了呢””\",\n                    desc: '点击返回首页',\n                    url: $('#noLoading#').lazyRule(() => {\n                        refreshPage(true)\n                        clearMyVar(\"Mykey\")\n                        return 'hiker://empty'\n                    }),\n                    col_type: \"text_center_1\"\n                })\n            } catch (e) {\n                d.push({\n                    title: \"““搜索未知错误””\",\n                    desc: '点击返回首页',\n                    url: $('#noLoading#').lazyRule(() => {\n                        refreshPage(true)\n                        clearMyVar(\"Mykey\")\n                        return 'hiker://empty'\n                    }),\n                    col_type: \"text_center_1\"\n                })\n                toast(\"搜索出现错误\");\n            };\n        };\n    };\n} else {\n    //主页列表\n    let home = api + \"getRecommend?page=\" + MY_PAGE + \"&size=20\";\n    let fen = api + \"getRecommendByPlatform?platform=\" + clas + \"&page=\" + MY_PAGE + \"&size=20\";\n    let url = clas == \"all\" ? home : fen;\n    let res = JSON.parse(request(url, headers)).data;\n    let place = \"home\";\n    for (let i in res) {\n        let temp = res[i];\n        $.require(\"public\").Public.Lists(api, uid, place, d, temp.roomId, temp.platForm, temp.ownerName, temp.categoryName, temp.online, temp.roomPic, temp.isLive);\n    };\n};\ndeleteItemByCls(\"cls_load\");\nsetResult(d);","search_url":"hiker://empty?kw=**","group":"⑥直播","searchFind":"js:\nif (getItem(\"uid\", \"\") == \"\") {\n    var d = [];\n    d.push({\n        title: \"请先登陆\",\n        url: \"hiker://page/history\"\n    });\n} else {\n    setResult([{\n        url: 'hiker://search?s=' + getParam(\"kw\"),\n        extra: {\n            rules: $.toString(() => {\n                let data = [];\n                $.require(\"search\").engines.forEach((Map, i) => {\n                    data.push({\n                        \"title\": Map,\n                        \"search_url\": buildUrl(\"hiker://empty\", {\n                            kw: \"**\",\n                            page: \"fypage\",\n                            engine: Map\n                        }),\n                        \"searchFind\": \"js:$.require('hiker://page/search?rule=JustLive').search()\"\n                    });\n                })\n                return JSON.stringify(data);\n            })\n        },\n        title: \"搜索：\" + getParam(\"kw\")\n    }])\n}\nsetResult(d);","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"二级\",\"path\":\"detail\",\"rule\":\"js:\\nlet d = [];\\nlet s = [];\\ns.push({\\n    title: \\\"<br><br><br><br><br>\\\",\\n    col_type: \\\"rich_text\\\",\\n    extra: {\\n        cls: \\\"cls_load\\\"\\n    }\\n}, {\\n    img: \\\"https://hikerfans.com/weisyr/img/Loading1.gif\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"pic_1_center\\\",\\n    extra: {\\n        cls: \\\"cls_load\\\"\\n    }\\n});\\nsetPreResult(s);\\n\\nlet api = \\\"http://yj1211.work:8013/api/live/\\\";\\nlet uid = getItem(\\\"uid\\\", \\\"\\\");\\nlet platform = getParam(\\\"platform\\\");\\nlet roomid = getParam(\\\"roomId\\\");\\nlet headers = {\\n    headers: {\\n        \\\"User-Agent\\\": \\\"okhttp/3.12.13\\\"\\n    }\\n};\\n\\nlet res = JSON.parse(request(api + \\\"getRoomInfo?uid=\\\" + uid + \\\"&platform=\\\" + platform + \\\"&roomId=\\\" + roomid, headers));\\n\\nif (platform == \\\"douyu\\\") {\\n    var url = \\\"https://m.douyu.com/\\\" + roomid;\\n} else if (platform == \\\"huya\\\") {\\n    var url = \\\"https://m.huya.com/\\\" + roomid;\\n} else if (platform == \\\"bilibili\\\") {\\n    var url = \\\"https://live.bilibili.com/h5/\\\" + roomid;\\n} else if (platform == \\\"douyin\\\") {\\n    var url = \\\"https://live.douyin.com/\\\" + roomid;\\n} else {\\n    var url = \\\"https://h5.cc.163.com/cc/\\\" + roomid;\\n};\\n\\nlet roompic = res.data.roomPic;\\nlet ownerpic = res.data.ownerHeadPic;\\nlet plat = platform.replace('huya', '虎牙').replace('douyu', '斗鱼').replace('cc', '网易CC').replace(\\\"bilibili\\\", \\\"哔哩\\\").replace(\\\"douyin\\\", \\\"抖音\\\");\\nlet category = res.data.categoryName;\\nlet Live = res.data.isLive == 1 ? \\\"直播中\\\" : \\\"未直播\\\";\\nlet ccls = MY_PARAMS.cls;\\nlet 万 = !/cls-home/.test(ccls) ? \\\"万粉丝\\\" : \\\"万\\\";\\nlet 人 = !/cls-home/.test(ccls) ? \\\"粉丝\\\" : \\\"人\\\";\\nlet online = res.data.online;\\nlet line = online >= \\\"10000\\\" ? (online / 10000).toFixed(1) + 万 : online + 人;\\n\\nd.push({\\n    title: res.data.ownerName,\\n    img: (roompic !== \\\"\\\" ? roompic : ownerpic) + \\\"@Referer=\\\",\\n    desc: \\\"分区：\\\" + plat + (category !== \\\"\\\" ? \\\"·\\\" + category : \\\"\\\") + \\\"\\\\n状态：\\\" + Live + \\\"·\\\" + line + \\\"\\\\n点击下方主播头像进入官网\\\",\\n    url: roompic !== \\\"\\\" ? roompic : ownerpic,\\n    col_type: 'movie_1_vertical_pic_blur',\\n    extra: {\\n        gradient: true\\n    }\\n}, {\\n    title: res.data.ownerName,\\n    img: ownerpic + \\\"@Referer=\\\",\\n    url: url,\\n    col_type: \\\"icon_2_round\\\"\\n});\\n\\nd.push({\\n    title: getItem(platform + roomid, \\\"0\\\") == 1 ? \\\"已关注\\\" : \\\"未关注\\\",\\n    url: $('#noLoading#').lazyRule((api, uid, headers, roomid, platform) => {\\n        if (getItem(platform + roomid, \\\"0\\\") == \\\"0\\\") {\\n            var foll = \\\"follow\\\";\\n            setItem(platform + roomid, \\\"1\\\");\\n        } else {\\n            var foll = \\\"unFollow\\\";\\n            clearItem(platform + roomid);\\n        };\\n        let tit = getItem(platform + roomid, \\\"0\\\");\\n        updateItem(\\\"id_isFollowed\\\", {\\n            title: tit == 1 ? \\\"已关注\\\" : \\\"未关注\\\"\\n        });\\n        let re = JSON.parse(request(api + foll + \\\"?platform=\\\" + platform + \\\"&roomId=\\\" + roomid + \\\"&uid=\\\" + uid, headers));\\n\\n        let list = findItemsByCls(\\\"cls_Subs\\\") || [];\\n        if (list.length == 0) {\\n            return \\\"toast://没有获取到列表\\\"\\n        };\\n        for (let i in list) {\\n            let li = list[i];\\n            let cls = li.extra.cls;\\n            let js2 = li.extra.longClick[1].js;\\n            updateItem(\\\"id_\\\" + platform + roomid, {\\n                extra: {\\n                    cls: cls,\\n                    id: \\\"id_\\\" + platform + roomid,\\n                    lineVisible: false,\\n                    longClick: [{\\n                        title: tit == \\\"1\\\" ? \\\"已关注\\\" : \\\"未关注\\\",\\n                        js: $.require(\\\"public\\\").Public.LongClick(api, uid, roomid, platform),\\n                    }, {\\n                        title: \\\"官网链接\\\",\\n                        js: js2\\n                    }]\\n                }\\n            });\\n            if (getMyVar(\\\"sType\\\", \\\"\\\") !== \\\"\\\" && tit == 0) {\\n                deleteItem(\\\"id_\\\" + platform + roomid);\\n            };\\n        };\\n        return \\\"toast://\\\" + re.data;\\n    }, api, uid, headers, roomid, platform),\\n    col_type: \\\"text_2\\\",\\n    extra: {\\n        id: \\\"id_isFollowed\\\"\\n    }\\n}, {\\n    col_type: \\\"line_blank\\\"\\n}, {\\n    title: \\\"选择线路\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"text_center_1\\\"\\n});\\n\\nfunction Lives(isLive) {\\n    d.push({\\n        desc: isLive == 0 ? \\\"直   播   已   结   束\\\" : \\\"直   播   已   结   束\\\\n\\\\n或  没  有  获  取  到  数  据\\\",\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    })\\n};\\nlet isLive = res.data.isLive;\\nif (isLive == 0) {\\n    Lives(isLive);\\n} else {\\n    let json = JSON.parse(fetch(api + \\\"getRealUrlMultiSource?platform=\\\" + platform + \\\"&roomId=\\\" + roomid, headers)).data || [];\\n    if (Object.keys(json).length !== 0) {\\n        for (let xl in json) {\\n            d.push({\\n                title: xl,\\n                col_type: \\\"text_2\\\",\\n                url: $('#noLoading#').lazyRule((list, mid) => {\\n                    let name = [];\\n                    let urls = []\\n                    for (var i in list) {\\n                        let li = list[i];\\n                        name.push(li.qualityName)\\n                        urls.push(li.playUrl)\\n                    };\\n                    return JSON.stringify(urls) !== '[\\\"\\\"]' ? JSON.stringify({\\n                        names: name,\\n                        urls: urls,\\n                        danmu: /douyu暂无/.test(urls) ? \\\"web://http://douyu_danmu.dev.tyrantg.com/?rid=\\\" + mid + \\\"&ver=1\\\" : \\\"\\\"\\n                    }) : \\\"toast://直播已结束或没有获取到数据\\\"\\n                }, json[xl], roomid)\\n            })\\n        };\\n    } else {\\n        Lives(isLive);\\n    };\\n};\\ndeleteItemByCls(\\\"cls_load\\\");\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"关注列表\",\"path\":\"history\",\"rule\":\"js:\\naddListener('onClose', $.toString(() => {\\n    clearMyVar('sType');\\n    clearMyVar('subs');\\n}));\\nlet s = [];\\nlet d = [];\\nsetPageTitle(\\\"关注\\\");\\nlet api = \\\"http://yj1211.work:8013/api/live/\\\";\\nlet uid = getItem(\\\"uid\\\", \\\"\\\");\\nlet headers = {\\n    headers: {\\n        \\\"User-Agent\\\": \\\"okhttp/3.12.13\\\"\\n    }\\n};\\nlet off = \\\"https://hikerfans.com/tubiao/messy/63.svg\\\";\\nlet on = \\\"https://hikerfans.com/tubiao/messy/55.svg\\\";\\nlet zc = getMyVar(\\\"zuce\\\", \\\"注 册\\\");\\ns.push({\\n    title: getItem(\\\"nickname\\\", zc),\\n    url: uid == \\\"\\\" ? $(\\\"#noLoading#\\\").lazyRule((zc) => {\\n        putMyVar(\\\"zuce\\\", zc == \\\"注 册\\\" ? \\\"登 录\\\" : \\\"注 册\\\");\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\";\\n    }, zc) : $(\\\"是否注销？\\\").confirm(() => {\\n        clearItem(\\\"uid\\\");\\n        clearItem(\\\"account\\\");\\n        clearItem(\\\"password\\\");\\n        clearItem(\\\"nickname\\\");\\n        clearItem(\\\"username\\\");\\n        back(true);\\n        return \\\"toast://注销成功\\\";\\n    }),\\n    img: \\\"https://hikerfans.com/tubiao/ke/73.png\\\",\\n    col_type: \\\"icon_2\\\"\\n}, {\\n    title: \\\"多线路\\\",\\n    img: getItem(\\\"multiline\\\", \\\"0\\\") == \\\"0\\\" ? off : on,\\n    col_type: \\\"icon_2\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((api, on, off) => {\\n        if (getItem(\\\"multiline\\\", \\\"0\\\") == \\\"0\\\") {\\n            setItem(\\\"multiline\\\", \\\"1\\\");\\n        } else {\\n            clearItem(\\\"multiline\\\");\\n        };\\n        let mul = getItem(\\\"multiline\\\", \\\"0\\\");\\n        updateItem(\\\"id_multiline\\\", {\\n            img: mul == \\\"0\\\" ? off : on\\n        });\\n        let clls = getMyVar(\\\"Mykey\\\", \\\"\\\") !== \\\"\\\" ? \\\"cls-so\\\" : \\\"cls-home\\\";\\n        let home = findItemsByCls(clls) || [];\\n        let Subs = findItemsByCls(\\\"cls-Subs\\\") || [];\\n        if (Subs.length == 0 || home.length == 0) {\\n            return \\\"toast://没有获取到列表\\\"\\n        };\\n\\n        function dxlsx(S) {\\n            let isLive = S.extra.isLive;\\n            let form = S.url.match(/platform=(.*)&/)[1];\\n            let mid = /hiker/.test(S.url) ? S.url.split(\\\"roomId=\\\")[1] : S.url.split(\\\"roomId=\\\")[1].split(\\\"@\\\")[0];\\n            let url = mul == \\\"0\\\" ? api + \\\"getRealUrlMultiSource?platform=\\\" + form + \\\"&roomId=\\\" + mid + $.require(\\\"public\\\").Public.Lazy(isLive) : \\\"hiker://page/detail?#immersiveTheme#&platform=\\\" + form + \\\"&roomId=\\\" + mid;\\n            updateItem(\\\"id_\\\" + form + mid, {\\n                url: url\\n            });\\n        };\\n        for (let s in Subs) {\\n            let S = Subs[s];\\n            dxlsx(S);\\n        };\\n        for (let h in home) {\\n            let H = home[h];\\n            dxlsx(H);\\n        };\\n        return \\\"hiker://empty\\\";\\n    }, api, on, off),\\n    extra: {\\n        id: \\\"id_multiline\\\"\\n    }\\n})\\nif (uid == \\\"\\\") {\\n    if (zc == \\\"登 录\\\") {\\n        s.push({\\n            desc: \\\"昵称 （1-20位）\\\",\\n            extra: {\\n                onChange: \\\"setItem('nick',input)\\\",\\n                titleVisible: false\\n            },\\n            col_type: \\\"input\\\"\\n        })\\n    };\\n    s.push({\\n        desc: \\\"账号 （6-20位数字或英文）\\\",\\n        extra: {\\n            onChange: \\\"setItem('account',input)\\\",\\n            titleVisible: false\\n        },\\n        col_type: \\\"input\\\"\\n    }, {\\n        desc: \\\"密码 （6-20位数字或英文）\\\",\\n        extra: {\\n            onChange: \\\"setItem('password',input)\\\",\\n            titleVisible: false\\n        },\\n        col_type: \\\"input\\\"\\n    }, {\\n        title: zc == \\\"注 册\\\" ? \\\"登  录\\\" : \\\"注 册\\\",\\n        url: $('#noLoading#').lazyRule((zc) => {\\n            let regin = zc == \\\"登 录\\\" ? \\\"register\\\" : \\\"login\\\";\\n            let nick = zc == \\\"登 录\\\" ? \\\"&nickname=\\\" + getItem(\\\"nick\\\", \\\"\\\") : \\\"\\\";\\n            let account = getItem(\\\"account\\\", \\\"\\\");\\n            let password = getItem(\\\"password\\\", \\\"\\\");\\n            if (account == \\\"\\\" || password == \\\"\\\") {\\n                return \\\"toast://帐号或密码不能为空！\\\";\\n            } else {\\n                let cookies = JSON.parse(post(\\\"http://yj1211.work:8013/api/\\\" + regin + \\\"?username=\\\" + account + nick + \\\"&password=\\\" + md5(password), {\\n                    headers: {\\n                        \\\"User-Agent\\\": \\\"okhttp/3.12.13\\\"\\n                    }\\n                }));\\n                //log(cookies)\\n                if (cookies.code == 200) {\\n                    setItem(\\\"uid\\\", cookies.data.uid);\\n                    setItem(\\\"nickname\\\", cookies.data.nickName);\\n                    setItem(\\\"username\\\", cookies.data.userName);\\n                    back();\\n                    clearItem(\\\"nick\\\");\\n                    clearMyVar(\\\"zuce\\\");\\n                    return zc == \\\"登 录\\\" ? \\\"toast://注册成功，已登录\\\" : \\\"toast://登录成功\\\";\\n                } else {\\n                    if (zc == \\\"登 录\\\") {\\n                        return \\\"toast://\\\" + cookies.message;\\n                    } else {\\n                        clearItem(\\\"nickname\\\");\\n                        clearItem(\\\"username\\\");\\n                        clearItem(\\\"uid\\\");\\n                        return \\\"toast://登陆失败，可能是用户名或密码有误\\\";\\n                    }\\n                };\\n            };\\n        }, zc),\\n        col_type: \\\"text_center_1\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    })\\n};\\ns.push({\\n    col_type: \\\"big_blank_block\\\"\\n}, {\\n    col_type: \\\"line_blank\\\"\\n}, {\\n    col_type: \\\"big_blank_block\\\",\\n});\\nlet place = \\\"Subs\\\";\\nlet sType = getMyVar(\\\"sType\\\");\\n\\ns.push({\\n    title: \\\"我的关注\\\",\\n    img: \\\"https://hikerfans.com/tubiao/q/103.png\\\",\\n    desc: sType == \\\"living\\\" ? \\\"直播中\\\\t\\\" : \\\"未直播\\\\t\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((api, uid, place) => {\\n        if (getMyVar(\\\"sType\\\") == \\\"living\\\") {\\n            putMyVar(\\\"sType\\\", \\\"outline\\\");\\n        } else {\\n            putMyVar(\\\"sType\\\", \\\"living\\\");\\n        };\\n\\n        let sTyp = getMyVar(\\\"sType\\\");\\n        updateItem(\\\"id_gzbt\\\", {\\n            desc: sTyp == \\\"living\\\" ? \\\"直播中\\\\t\\\" : \\\"未直播\\\\t\\\"\\n        });\\n\\n        deleteItemByCls(\\\"cls-Subs\\\");\\n        let res = storage0.getMyVar(\\\"subs\\\");\\n        let su = [];\\n        for (let i in res) {\\n            let temp = res[i];\\n            if (sTyp == \\\"living\\\") {\\n                if (temp.isLive == 1) {\\n                    $.require(\\\"public\\\").Public.Lists(api, uid, place, su, temp.roomId, temp.platForm, temp.ownerName, temp.categoryName, temp.online, temp.roomPic, temp.isLive);\\n                };\\n            } else\\n            if (temp.isLive == 0 && temp.platForm !== null) {\\n                $.require(\\\"public\\\").Public.Lists(api, uid, place, su, temp.roomId, temp.platForm, temp.ownerName, temp.categoryName, temp.online, temp.ownerHeadPic, temp.isLive);\\n            };\\n        };\\n        addItemAfter(\\\"id_gzlb\\\", su);\\n        return \\\"hiker://empty\\\";\\n    }, api, uid, place),\\n    col_type: \\\"avatar\\\",\\n    extra: {\\n        id: \\\"id_gzbt\\\"\\n    }\\n})\\n\\ns.push({\\n    col_type: \\\"line\\\",\\n    extra: {\\n        id: \\\"id_gzlb\\\"\\n    }\\n});\\ns.push({\\n    col_type: \\\"rich_text\\\",\\n    extra: {\\n        cls: \\\"cls_load\\\"\\n    }\\n}, {\\n    img: \\\"https://hikerfans.com/weisyr/img/Loading1.gif\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"pic_1_center\\\",\\n    extra: {\\n        cls: \\\"cls_load\\\"\\n    }\\n});\\nsetPreResult(s);\\nif (uid !== \\\"\\\") {\\n    let res = JSON.parse(request(api + \\\"getRoomsOn?uid=\\\" + uid, headers)).data;\\n    if (res.length !== 0) {\\n        storage0.putMyVar(\\\"subs\\\", res);\\n        for (let i in res) {\\n            let temp = res[i];\\n            if (sType == \\\"living\\\") {\\n                if (temp.isLive == 1) {\\n                    $.require(\\\"public\\\").Public.Lists(api, uid, place, d, temp.roomId, temp.platForm, temp.ownerName, temp.categoryName, temp.online, temp.roomPic, temp.isLive);\\n                };\\n            } else\\n            if (temp.isLive == 0 && temp.platForm !== null) {\\n                $.require(\\\"public\\\").Public.Lists(api, uid, place, d, temp.roomId, temp.platForm, temp.ownerName, temp.categoryName, temp.online, temp.ownerHeadPic, temp.isLive);\\n            };\\n        };\\n    } else {\\n        d.push({\\n            col_type: 'rich_text'\\n        }, {\\n            desc: \\\"添 加 关 注 后 可 查 看\\\",\\n            url: \\\"hiker://empty\\\",\\n            col_type: \\\"text_center_1\\\",\\n            extra: {\\n                lineVisible: false\\n            }\\n        })\\n    };\\n} else {\\n    d.push({\\n        col_type: 'rich_text'\\n    }, {\\n        desc: \\\"登 录 后 查 看 关 注\\\",\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    })\\n};\\ndeleteItemByCls(\\\"cls_load\\\");\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"总分类\",\"path\":\"newClass\",\"rule\":\"js:\\nvar d = [];\\nlet s = [];\\n/*\\naddListener('onClose', $.toString(() => {\\n    //clearMyVar('Myfl');\\n    //clearMyVar('Mypt');\\n    }));*/\\nlet api = \\\"http://yj1211.work:8013/api/live/\\\";\\nlet headers = {\\n    headers: {\\n        \\\"User-Agent\\\": \\\"okhttp/3.12.13\\\"\\n    }\\n};\\nlet img选中 = \\\"https://img2.baidu.com/it/u=60238502,936088025&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=582@Referer=\\\";\\nlet img未选 = \\\"https://img0.baidu.com/it/u=960549084,3242692817&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500@Referer=\\\";\\ns.push({\\n    title: \\\"版块分类\\\",\\n    url: $('#noLoading#').lazyRule(() => {\\n        refreshPage();\\n        clearMyVar('Myfl')\\n        return \\\"hiker://empty\\\"\\n    }),\\n    img: getMyVar(\\\"Myfl\\\") == '' ? img选中 : img未选,\\n    col_type: \\\"icon_2\\\"\\n}, {\\n    title: \\\"平台分类\\\",\\n    url: $('#noLoading#').lazyRule(() => {\\n        refreshPage();\\n        putMyVar(\\\"Myfl\\\", 'pt')\\n        /*clearMyVar('Mypt')*/\\n        return \\\"hiker://empty\\\"\\n    }),\\n    img: getMyVar(\\\"Myfl\\\") == '' ? img未选 : img选中,\\n    col_type: \\\"icon_2\\\"\\n});\\n\\n//平台分类\\nif (getMyVar(\\\"Myfl\\\")) {\\n    let fro = \\\"Mypt\\\";\\n    $.require(\\\"public\\\").Public.From(s, fro);\\n    s.push({\\n        col_type: \\\"big_blank_block\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\"\\n    }, {\\n        col_type: \\\"line_blank\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\"\\n    });\\n};\\ns.push({\\n    col_type: \\\"rich_text\\\",\\n    extra: {\\n        cls: \\\"cls_load\\\"\\n    }\\n}, {\\n    img: \\\"https://hikerfans.com/weisyr/img/Loading1.gif\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"pic_1_center\\\",\\n    extra: {\\n        cls: \\\"cls_load\\\"\\n    }\\n});\\nsetPreResult(s);\\n\\n//平台列表\\nif (getMyVar(\\\"Myfl\\\")) {\\n    let pt_url = api + \\\"getAreas?platform=\\\" + getMyVar(\\\"Mypt\\\", \\\"huya\\\");\\n    var res = JSON.parse(request(pt_url, headers)).data;\\n    //log(res)\\n    for (let j in res) {\\n        let temp = res[j];\\n        for (data of temp)\\n            d.push({\\n                title: data.areaName,\\n                img: (getMyVar(\\\"Mypt\\\", \\\"huya\\\") !== \\\"douyin\\\" ? data.areaPic : \\\"https://www.douyin.com/favicon.ico\\\") + \\\"@Referer=\\\",\\n                url: \\\"hiker://page/newClassList?page=fypage&platform=\\\" + data.platform + \\\"&area=\\\" + data.areaName,\\n                col_type: \\\"icon_5\\\"\\n            })\\n    };\\n} else {\\n    d.push({\\n        col_type: \\\"big_blank_block\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\"\\n    }, {\\n        col_type: \\\"line\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\",\\n        extra: {\\n            id: \\\"id_justdlz\\\"\\n        }\\n    });\\n\\n    //版块分类\\n    var url = api + 'getAllAreas';\\n    var res = JSON.parse(request(url, headers)).data;\\n    //log(res)\\n\\n    var typeNames = [];\\n    var bigList = [];\\n    var smallList = [];\\n    putMyVar(\\\"typeNameVar\\\", !getMyVar('typeNameVar') ? '全部' : getMyVar('typeNameVar'));\\n    putMyVar('area', 'areaName')\\n\\n    for (let r of res) {\\n        for (let x of r) {\\n            if (!typeNames.includes(x.typeName)) {\\n                typeNames.push(x.typeName);\\n\\n                bigList.push({\\n                    title: x.typeName,\\n                    url: $('#noLoading#').lazyRule((typeNameVar, r) => {\\n                        putMyVar(\\\"typeNameVar\\\", typeNameVar);\\n\\n                        updateItem(\\\"id_justbj\\\", {\\n                            title: \\\"<b>\\\\t\\\" + typeNameVar.fontcolor(\\\"#FA7298\\\") + \\\"</b>\\\"\\n                        });\\n                        deleteItemByCls(\\\"cls_justxl\\\");\\n                        smalList = r.map((li) => {\\n                            return {\\n                                title: li.areaName,\\n                                img: li.areaPic,\\n                                url: \\\"hiker://page/newClassList?typeName=\\\" + li.typeName + \\\"&areaName=\\\" + li.areaName + \\\"&page=fypage\\\",\\n                                col_type: \\\"icon_5\\\",\\n                                typeName: li.typeName,\\n                                extra: {\\n                                    cls: \\\"cls_justxl\\\"\\n                                }\\n                            }\\n                        });\\n                        addItemAfter(\\\"id_justxlz\\\", smalList);\\n                        return \\\"hiker://empty\\\"\\n                    }, x.typeName, r),\\n                    col_type: \\\"scroll_button\\\",\\n                })\\n            };\\n\\n            smallList.push({\\n                title: x.areaName,\\n                url: 'hiker://page/newClassList?typeName=' + x.typeName + '&areaName=' + x.areaName + \\\"&page=fypage\\\",\\n                img: x.areaPic + \\\"@Referer=\\\",\\n                col_type: \\\"icon_5\\\",\\n                typeName: x.typeName,\\n                extra: {\\n                    cls: \\\"cls_justxl\\\"\\n                }\\n            })\\n        }\\n    };\\n\\n    bigList.unshift({\\n        title: \\\"全部\\\",\\n        url: $('#noLoading#').lazyRule((typeNameVar, smallList) => {\\n            putMyVar(\\\"typeNameVar\\\", typeNameVar);\\n            updateItem(\\\"id_justbj\\\", {\\n                title: \\\"<b>\\\\t\\\" + typeNameVar.fontcolor(\\\"#FA7298\\\") + \\\"</b>\\\"\\n            });\\n            deleteItemByCls(\\\"cls_justxl\\\");\\n            addItemAfter(\\\"id_justxlz\\\", smallList);\\n            return \\\"hiker://empty\\\";\\n        }, '全部', smallList),\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    d = d.concat(bigList);\\n\\n    d.push({\\n        title: \\\"<b>\\\\t\\\" + getMyVar('typeNameVar').fontcolor(\\\"#FA7298\\\") + \\\"</b>\\\",\\n        img: \\\"https://hikerfans.com/tubiao/q/33.png\\\",\\n        col_type: \\\"avatar\\\",\\n        extra: {\\n            id: \\\"id_justbj\\\"\\n        }\\n    }, {\\n        col_type: \\\"line_blank\\\",\\n        extra: {\\n            id: \\\"id_justxlz\\\"\\n        }\\n    });\\n\\n    if (getMyVar('typeNameVar') == '全部') {\\n        d = d.concat(smallList);\\n    } else {\\n        d = d.concat(smallList.filter(s => s.typeName == getMyVar('typeNameVar')));\\n    };\\n};\\ndeleteItemByCls(\\\"cls_load\\\");\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"总列表\",\"path\":\"newClassList\",\"rule\":\"js:\\nvar d = [];\\nlet s = [];\\naddListener('onClose', $.toString(() => {\\n    clearMyVar('Myfro');\\n    clearMyVar('home');\\n}));\\nlet api = \\\"http://yj1211.work:8013/api/live/\\\";\\nlet uid = getItem(\\\"uid\\\", \\\"\\\");\\nlet headers = {\\n    headers: {\\n        \\\"User-Agent\\\": \\\"okhttp/3.12.13\\\"\\n    }\\n};\\n//切换平台\\nif (MY_PAGE == 1) {\\n    let fro = \\\"Myfro\\\";\\n    $.require(\\\"public\\\").Public.From(s, fro);\\n    s.push({\\n        col_type: \\\"line_blank\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\"\\n    }, {\\n        col_type: \\\"big_blank_block\\\"\\n    })\\n    s.push({\\n        col_type: \\\"rich_text\\\",\\n        extra: {\\n            cls: \\\"cls_load\\\"\\n        }\\n    }, {\\n        img: \\\"https://hikerfans.com/weisyr/img/Loading1.gif\\\",\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"pic_1_center\\\",\\n        extra: {\\n            cls: \\\"cls_load\\\"\\n        }\\n    })\\n};\\nsetPreResult(s);\\n\\n//列表\\nlet Myfro = getMyVar(\\\"Myfro\\\", \\\"\\\");\\nlet page = getParam(\\\"page\\\");\\nlet zong = api + 'getRecommendByAreaAll?areaType=' + getParam(\\\"typeName\\\") + '&area=' + getParam(\\\"areaName\\\") + '&page=' + page;\\n\\nlet zf = api + \\\"getRecommendByPlatformArea?platform=\\\" + Myfro + \\\"&area=\\\" + getParam(\\\"areaName\\\") + \\\"&page=\\\" + page + \\\"&size=20\\\";\\n\\nlet pin = api + \\\"getRecommendByPlatformArea\\\" + MY_URL.replace(\\\"hiker://page/newClassList\\\", \\\"\\\") + \\\"&page=\\\" + page + \\\"&size=20\\\";\\n//log(pin)\\n\\nlet pf = api + \\\"getRecommendByPlatformArea?platform=\\\" + Myfro + \\\"&area=\\\" + getMyVar(\\\"area\\\") + \\\"&page=\\\" + page + \\\"&size=20\\\";\\n\\ntry {\\n    let area = pin.match(/area=(.*?)&/)[1];\\n    //log(area)\\n    putMyVar(\\\"area\\\", area);\\n} catch (e) {\\n    var area = \\\"\\\";\\n};\\nlet url = \\\"\\\";\\nif (area == \\\"\\\") {\\n    url = Myfro !== \\\"\\\" ? zf : zong;\\n} else {\\n    url = Myfro !== \\\"\\\" ? pf : pin;\\n};\\n\\ntry {\\n    let res = (JSON.parse(request(url, headers)).data || []);\\n    if (res == (null || \\\"\\\") && page == \\\"1\\\") {\\n        $.require(\\\"public\\\").Public.Empty(d);\\n    };\\n    let place = \\\"home\\\";\\n    for (let i in res) {\\n        let temp = res[i];\\n        $.require(\\\"public\\\").Public.Lists(api, uid, place, d, temp.roomId, temp.platForm, temp.ownerName, temp.categoryName, temp.online, temp.roomPic, temp.isLive);\\n    };\\n} catch (e) {\\n    if (page == \\\"1\\\") {\\n        let area = url.match(/area=(.*)&/)[1];\\n        if (getMyVar(\\\"home\\\", \\\"0\\\") == \\\"1\\\") {\\n            putMyVar(\\\"sarea\\\", area);\\n        };\\n        $.require(\\\"public\\\").Public.Empty(d);\\n    };\\n};\\ndeleteItemByCls(\\\"cls_load\\\");\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索页面\",\"path\":\"search\",\"rule\":\"$.exports = {\\n    engines: [\\\"所有平台\\\", \\\"虎牙直播\\\", \\\"斗鱼直播\\\", \\\"哔哩哔哩\\\", \\\"抖音直播\\\", \\\"网易CC\\\"],\\n    search: function() {\\n        //log(getParam(\\\"engine\\\"))\\n        let api = \\\"http://yj1211.work:8013/api/live/\\\";\\n        let headers = {\\n            headers: {\\n                \\\"User-Agent\\\": \\\"okhttp/3.12.13\\\"\\n            }\\n        };\\n        let url = api + \\\"search?keyWords=\\\" + getParam(\\\"kw\\\") + \\\"&isLive=0&uid=\\\" + getItem(\\\"uid\\\", \\\"\\\") + \\\"&platform=\\\" + [\\\"all\\\", \\\"huya\\\", \\\"douyu\\\", \\\"bilibili\\\", \\\"douyin\\\", \\\"cc\\\"][\\n            [\\\"所有平台\\\", \\\"虎牙直播\\\", \\\"斗鱼直播\\\", \\\"哔哩哔哩\\\", \\\"抖音直播\\\", \\\"网易CC\\\"].indexOf(getParam(\\\"engine\\\"))\\n        ]\\n        let json = JSON.parse(request(url, headers)).data;\\n        d = json.map(data => ({\\n            title: data.platform.replace('huya', '虎牙').replace('douyu', '斗鱼').replace('cc', '网易CC').replace(\\\"bilibili\\\", \\\"哔哩\\\").replace(\\\"douyin\\\", \\\"抖音\\\") + '·' + data.nickName,\\n            desc: data.followers >= \\\"10000\\\" ? (data.followers / 10000).toFixed(1) + \\\"万粉丝\\\" : data.followers + \\\"粉丝\\\",\\n            img: (data.headPic !== null && data.headPic.startsWith('/') ? 'https:' + data.headPic : data.headPic) + '@Referer=',\\n            content: data.isLive == '1' ? '直播中' : '未开播',\\n            url: getItem('multiline', '0') == \\\"0\\\" ? api + \\\"getRealUrlMultiSource?platform=\\\" + data.platform + \\\"&roomId=\\\" + data.roomId + $.require(\\\"public?&rule=JustLive\\\").Public.Lazy(data.isLive) : \\\"hiker://page/detail?#immersiveTheme#&rule=JustLive&platform=\\\" + data.platform + \\\"&roomId=\\\" + data.roomId\\n        }))\\n        setResult(d);\\n    }\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"公用函数\",\"path\":\"public\",\"rule\":\"let headers = {\\n    headers: {\\n        \\\"User-Agent\\\": \\\"okhttp/3.12.13\\\"\\n    }\\n};\\n\\nlet From = function(d, fro) {\\n    let tit = [\\\"虎牙\\\", \\\"斗鱼\\\", \\\"哔哩\\\", \\\"抖音\\\", \\\"网易\\\"];\\n    let furl = [\\\"huya\\\", \\\"douyu\\\", \\\"bilibili\\\", \\\"douyin\\\", \\\"cc\\\"];\\n    let pic = [\\\"https://hikerfans.com/tubiao/erdi/68.png\\\", \\\"https://hikerfans.com/tubiao/erdi/1.png\\\", \\\"https://hikerfans.com/tubiao/erdi/320.png\\\", \\\"https://hikerfans.com/tubiao/erdi/160.png\\\", \\\"https://hikerfans.com/tubiao/erdi/214.png\\\"];\\n    let titll = fro == \\\"Mypt\\\" ? getMyVar(fro, \\\"huya\\\") : getMyVar(fro);\\n    for (let i in tit) {\\n        let ti = tit[i];\\n        d.push({\\n            title: furl[i] == titll ? \\\"‘‘’’<b>\\\" + ti.fontcolor(\\\"#FA7298\\\") + \\\"</b>\\\" : ti,\\n            url: $('#noLoading#').lazyRule((url, fro) => {\\n                putMyVar(fro, url);\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\"\\n            }, furl[i], fro),\\n            img: pic[i] + \\\"@Referer=\\\",\\n            col_type: \\\"icon_5\\\"\\n        })\\n    };\\n};\\n\\nlet Lists = function(api, uid, place, d, roomId, platForm, ownerName, categoryName, online, roomPic, isLive) {\\n    let category = categoryName !== \\\"\\\" ? categoryName + '·' : \\\"\\\";\\n    let Live = (isLive == '1' ? '直播中' : '未开播') + '·';\\n    let 万 = place == \\\"home\\\" ? \\\"万\\\" : \\\"万粉丝\\\";\\n    let 人 = place == \\\"home\\\" ? \\\"人\\\" : \\\"粉丝\\\";\\n    let line = online >= \\\"10000\\\" ? (online / 10000).toFixed(1) + 万 : online + 人;\\n    let plat = platForm.replace('huya', '虎牙').replace('douyu', '斗鱼').replace('cc', '网易CC').replace(\\\"bilibili\\\", \\\"哔哩\\\").replace(\\\"douyin\\\", \\\"抖音\\\");\\n    let roompic = roomPic !== null && roomPic.startsWith('/') ? 'https:' + roomPic : roomPic;\\n    d.push({\\n        title: plat + '·' + ownerName,\\n        desc: (place == \\\"so\\\" ? Live : category) + line,\\n        img: roompic + '@Referer=',\\n        url: getItem('multiline', '0') == \\\"0\\\" ? api + \\\"getRealUrlMultiSource?platform=\\\" + platForm + \\\"&roomId=\\\" + roomId + $.require(\\\"public\\\").Public.Lazy(isLive) : \\\"hiker://page/detail?#immersiveTheme#&platform=\\\" + platForm + \\\"&roomId=\\\" + roomId,\\n        col_type: \\\"movie_2\\\",\\n        extra: {\\n            cls: \\\"cls_Subs \\\" + \\\"cls-\\\" + place,\\n            id: \\\"id_\\\" + platForm + roomId,\\n            isLive: isLive,\\n            lineVisible: false,\\n            longClick: [{\\n                title: getItem(platForm + roomId, \\\"0\\\") == \\\"1\\\" ? \\\"已关注\\\" : \\\"未关注\\\",\\n                js: $.require(\\\"public\\\").Public.LongClick(api, uid, roomId, platForm),\\n            }, {\\n                title: \\\"官网链接\\\",\\n                js: $.toString((roomid, platform) => {\\n                    switch (platform) {\\n                        case \\\"douyu\\\":\\n                            var url = \\\"https://m.douyu.com/\\\" + roomid\\n                            break\\n                        case \\\"bilibili\\\":\\n                            var url = \\\"https://live.bilibili.com/h5/\\\" + roomid\\n                            break\\n                        case \\\"huya\\\":\\n                            var url = \\\"https://m.huya.com/\\\" + roomid\\n                            break\\n                        case \\\"douyin\\\":\\n                            var url = \\\"https://live.douyin.com/\\\" + roomid\\n                            break\\n                        case \\\"cc\\\":\\n                            var url = \\\"https://h5.cc.163.com/cc/\\\" + roomid\\n                            break\\n                    }\\n                    return url\\n                }, roomId, platForm)\\n            }]\\n        }\\n    })\\n};\\n\\nlet LongClick = function(api, uid, roomid, platform) {\\n    return $.toString((api, uid, headers, roomid, platform) => {\\n        if (getItem(platform + roomid, \\\"0\\\") == \\\"0\\\") {\\n            var foll = \\\"follow\\\";\\n            setItem(platform + roomid, \\\"1\\\");\\n        } else {\\n            var foll = \\\"unFollow\\\";\\n            clearItem(platform + roomid);\\n        };\\n        let res = JSON.parse(request(api + foll + \\\"?platform=\\\" + platform + \\\"&roomId=\\\" + roomid + \\\"&uid=\\\" + uid, headers));\\n\\n        let subs = findItemsByCls(\\\"cls_Subs\\\") || [];\\n        if (subs.length == 0) {\\n            return \\\"toast://没有获取到关注列表\\\";\\n        };\\n        let tit = getItem(platform + roomid, \\\"0\\\");\\n        for (let i in subs) {\\n            let li = subs[i];\\n            let cls = li.extra.cls;\\n            let js2 = li.extra.longClick[1].js;\\n            updateItem(\\\"id_\\\" + platform + roomid, {\\n                extra: {\\n                    cls: cls,\\n                    id: \\\"id_\\\" + platform + roomid,\\n                    lineVisible: false,\\n                    longClick: [{\\n                        title: tit == \\\"1\\\" ? \\\"已关注\\\" : \\\"未关注\\\",\\n                        js: $.require(\\\"public\\\").Public.LongClick(api, uid, roomid, platform),\\n                    }, {\\n                        title: \\\"官网链接\\\",\\n                        js: js2\\n                    }]\\n                }\\n            });\\n            if (getMyVar(\\\"sType\\\", \\\"\\\") !== \\\"\\\" && tit == 0) {\\n                deleteItem(\\\"id_\\\" + platform + roomid);\\n            };\\n        };\\n        return \\\"toast://\\\" + res.data;\\n    }, api, uid, headers, roomid, platform);\\n};\\n\\nlet Lazy = function(isLive) {\\n    return $(\\\"\\\").lazyRule((headers, isLive) => {\\n        if (isLive == 0) return \\\"toast://直播已结束！\\\";\\n        let mid = input.split(\\\"roomId=\\\")[1];\\n        let json = JSON.parse(fetch(input, headers)).data || [];\\n        let toas = \\\"toast://直播已结束或没有获取到数据\\\";\\n        if (Object.keys(json).length == 0) return toas;\\n        for (let xl in json) {\\n            let name = [];\\n            let urls = []\\n            let list = json[xl];\\n            for (var i in list) {\\n                let li = list[i];\\n                name.push(li.qualityName)\\n                urls.push(li.playUrl)\\n            };\\n            return JSON.stringify(urls) == '[\\\"\\\"]' ? toas : JSON.stringify({\\n                names: name,\\n                urls: urls,\\n                danmu: /douyu暂无/.test(urls) ? \\\"web://http://douyu_danmu.dev.tyrantg.com/?rid=\\\" + mid + \\\"&ver=1\\\" : /huya/.test(urls) ? \\\"\\\" : \\\"\\\"\\n            });\\n        };\\n    }, headers, isLive);\\n};\\n\\nlet Empty = function(d) {\\n    d.push({\\n        title: '<br><br>',\\n        col_type: 'rich_text'\\n    }, {\\n        desc: \\\"暂  无  房  间\\\\n\\\\n请  切  换  其  它  平  台\\\",\\n        url: 'hiker://empty',\\n        col_type: 'text_center_1',\\n        extra: {\\n            lineVisible: false\\n        }\\n    });\\n};\\n\\n$.exports.Public = {\\n    \\\"Lists\\\": Lists,\\n    \\\"From\\\": From,\\n    \\\"LongClick\\\": LongClick,\\n    \\\"Lazy\\\": Lazy,\\n    \\\"Empty\\\": Empty\\n};\"}]","icon":"https://m.dianlut.com/d/file/image/20220416/1650079550544463.jpg","proxy":""}